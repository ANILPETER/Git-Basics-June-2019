{"name":"Git-basics-june-2019","tagline":"This repository is created to understand and test the basics of version control using Git","body":"# Git-Basics-June-2019\r\nThis repository is created to understand and test the Basics of Version Control using Git\r\n\r\n# Git-Commands\r\nCollection of git commands that you need to use quite often.\r\n\r\n## Some great links:\r\n* Git-Branching-Basic-Branching-and-Merging: https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging\r\n* Git-Branching-Rebasing: https://git-scm.com/book/en/v2/Git-Branching-Rebasing\r\n* Git-Tools-Stashing-and-Cleaning: https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning\r\n\r\n## 🧑🏻User Config related commands:\r\n* View user details:\r\n\r\n  📝 `git config user.name`\r\n \r\n  📝 `git config user.email`\r\n* View all details:\r\n\r\n  📝 `git config --list`\r\n* Set details globally:\r\n\r\n  📝 `git config --global user.name \"<user_name>\"`\r\n\r\n  📝 `git config --global user.email \"<email>\"`\r\n\r\n  Not recommended to use global settings, better use project level settings. Helpful if you have multiple accounts.\r\n* Set details at project level:\r\n\r\n  📝 `git config user.name \"<user_name>\"`\r\n\r\n  📝 `git config user.email \"<email>\"`\r\n\r\n## 🔁 Remote related commands:\r\n* Get remote repository to local:\r\n\r\n  📝 `git clone <repository_url>`\r\n\r\n* List all existing remotes:\r\n\r\n  📝 `git remote -v`\r\n\r\n* Add remote:\r\n\r\n  📝 `git remote add <remote_name> <repository_url>`\r\n\r\n* Update/Change remote url:\r\n\r\n  📝 `git remote set-url <existing_remote_name> <new_url>`\r\n\r\n* Remove remote:\r\n\r\n  📝 `git remote remove <remote_name>`\r\n\r\n  More Explanation: http://help.github.com/articles/changing-a-remote-s-url\r\n\r\n## 🤷🏻‍♂️ Ignore related commads:\r\n* Ignore tracked files:\r\n\r\n  📝 `git update-index --assume-unchanged <file>`\r\n\r\n\r\n## 🌿 Branch related commands:\r\n* View branches:\r\n\r\n  📝 `git branch`\r\n\r\n* Switch to a branch:\r\n\r\n  📝 `git checkout <branch_name>`\r\n\r\n* Switch to a branch igorning non-commited changes on current branch\r\n\r\n  📝 `git checkout -f <branch_name>`\r\n\r\n* Get a remote branch on local and switch to it:\r\n\r\n  📝 `git fetch && git checkout <branch_name>`\r\n\r\n* Cut a new branch from an existing branch and switch to the newly created branch:\r\n\r\n  📝 `git checkout -b <new_branch_name> <existing_branch_name>`\r\n\r\n* Save changes in the branch (on local):\r\n\r\n  📝 `git commit` for bigger commit messages\r\n\r\n  📝 `git commit -m \"<commit_message>\"` for smaller commit messages\r\n\r\n* Push changes from local branch to remote branch:\r\n\r\n  📝 `git push -u <remote_name> <branch_name>` if branch is created locally and it doesn't exist at remote yet,\r\n\r\n  📝 `git push <remote_name> <branch_name>` otherwise\r\n  \r\n* Rename branch:\r\n\r\n  📝 `git branch -m <new_name>` if on the branch that needs to be renamed: \r\n\r\n  📝 `git branch -m <old_name> <new_name>` if on different branch: \r\n\r\n  The above is enough if the branch only exists in your local, but if the branch has been pushed to remote, follow these two additional steps:\r\n\r\n  📝 `git push origin :<old_name> <new_name>` This will delete old_name remote branch and push new_name local branch\r\n  \r\n  📝 `<switch to branch and> git push origin -u <new_name>`This will reset the upstream branch for the new-name local branch:\r\n\r\n* Merge a branch with another:\r\n\r\n  📝 `git checkout <destination_branch>`\r\n\r\n  📝 `git merge <source_branch>`\r\n\r\n  I typically merge using GUI(IntelliJ for Java Projects)\r\n* Delete local branch:\r\n\r\n  📝 `git branch -d <branch_name>`\r\n\r\n  📝 `git branch -D <branch_name>` if you have uncommited/unmerged changes:\r\n  \r\n## 🔀 Revert related commands:\r\n* Revert to older commits:\r\n\r\n  📝 `git reset --hard <destination_commit_id>`\r\n\r\n  If the commits that are being reverted were already pushed to remote do `git push --force` also, however, be very very careful, this will rewrite your history. You will lose the commit and is generally not a very nice thing to do in a collaborative environment.\r\n\r\n\r\n* Pull changes from remote ignoring any local changes:\r\n\r\n  📝 `git reset ---hard` to go to last commit and then,\r\n\r\n  📝 `git pull <remote_name> <repository_url>`\r\n  \r\n* Unstage a file:\r\n\r\n  📝 `git reset file/to/unstage`\r\n  \r\n\r\n* Edit a commit message which is not yet pushed\r\n\r\n  📝 `git commit --amend` for bigger messages\r\n\r\n  📝 `git commit --amend -m <new_commit_message>`\r\n\r\n  If commits were already pushed to remote, update the remote too with below command\r\n\r\n  📝 `git push <remote_name> <branch_name> -f` or `git push <remote_name> <branch_name> --force`\r\n\r\n\r\n* Revert specific files to specific commit:\r\n\r\n  📝 `git checkout <commit_id> -- <file1/to/restore> <file2/to/restore>`\r\n\r\n\r\n* Recover a branch after its deleted:\r\n\r\n  📝 `git checkout -b <branch_name> <sha>`\r\n\r\n  To find sha do `git reflog` or in case you have just deleted your branch, then scroll up in terminal to find something like `Deleted branch <your_branch> (was <sha>)`\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}